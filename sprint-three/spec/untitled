

var BinarySearchTree = function(value){
	var bst = {};

	bst.value = value;
	bst.left;
	bst.right;
	bst.head;

	return _.extend(bst, BinarySearchTree.prototype);
};

BinarySearchTree.prototype = {
	addLeaf: function (tree) {
		if (typeof tree !== 'object') {
			tree = BinarySearchTree(tree);
		}

		if (this.value > tree.value){
			if (this.left === undefined) {
				this.left = tree;
			} else {
				this.left.addLeaf(tree);
			}
		} else {
			if (this.right === undefined){
				this.right = tree;
			} else{
				this.right.addLeaf(tree);
			}
		}

		//this.rebalance();
	},

	insert: function (tree) {
		this.addLeaf(tree);
		debugger;
		return this.rebalance();
	},
	
	// insert: function (tree) {
	// 	var insertLeaf = function (tree) {
	// 		if (typeof tree !== 'object') {
	// 			tree = BinarySearchTree(tree);
	// 		}

	// 		if (this.value > tree.value){
	// 			if (this.lef t === undefined) {
	// 				this.left = tree;
	// 			} else {
	// 				insertLeaf(tree);
	// 			}
	// 		} else {
	// 			if (this.right === undefined){
	// 				this.right = tree;
	// 			} else{
	// 				insertLeaf(tree);
	// 			}
	// 		}
	// 	};
	// 	insertLeaf(tree);
	// 	this.rebalance();
	// },

	contains: function (value) {
		if (this.value === value) {
			return true;
		}
		if (this.value > value) {
			return (this.left !== undefined) ? this.left.contains(value) : false;
		} else {
			return (this.right !== undefined) ? this.right.contains(value) : false;
		}
	},

	depthFirstLog: function (cb) {
		cb(this.value);
		if (this.left !== undefined){
			this.left.depthFirstLog(cb);
		}
		if (this.right !== undefined){
			this.right.depthFirstLog(cb);
		}
	},

	breadthFirstLog: function (cb) {
		var queue = [];
		var children = [this];
		var getChildrenOf = function (array) {
			return _.reject(
					_.flatten(
						_.map(children, function (tree) {
							return [tree.left, tree.right];
						})
					), function (value) {
						return value === undefined
					});
		};

		while (children.length > 0) {
			queue = queue.concat(children);
			children = getChildrenOf(children);
		}

		_.each(queue, function (tree) {
			cb(tree);
		});

	},

	depth: function (level) { // returns depth + 1
		if (this === window) { return 1; }
		level = level + 1 || 1;
		return Math.max(level, BinarySearchTree.prototype.depth.call(this.left, level), BinarySearchTree.prototype.depth.call(this.right, level));
	},

	getMaxLeftOrRight: function (side) { 
		var node = this;
		while (node[side] !== undefined) {
			node = node[side];
		}
		return node;
	},

	getMax: function () {
		return this.getMaxLeftOrRight('right');
	},

	getMin: function () {
		return this.getMaxLeftOrRight('left');
	},

	getParent: function (value) {
		if ((this.left && this.left.value === value) || (this.right && this.right.value === value)) {
			return this;
		}
		if (this.value > value && this.left !== undefined) {
			return this.left.getParent(value);
		}

		if (this.value < value && this.right !== undefined) {
			return this.right.getParent(value);
		}
	},

	rebalance: function () {
		var depthOfLeft = BinarySearchTree.prototype.depth.call(this.left);
		var depthOfRight = BinarySearchTree.prototype.depth.call(this.right);
		var newRoot;
		if ((depthOfLeft / depthOfRight) >= 2) {

				newRoot = this.left.getMax();
				var newRootSubTree = newRoot.left,
				newRootParent = this.getParent(newRoot.value);

			// remove newRoot as a leaf
			newRootParent.right = undefined;

			// add left and this to newRoot
			newRoot.left = this.left;
			newRoot.right = this;

			// adds subtree
			if (newRootSubTree) {
				newRoot.left.addLeaf(newRootSubTree);
			}

			// remove left from this
			this.left = undefined; 
		}

		if ((depthOfRight / depthOfLeft) >= 2) {

		    newRoot = this.right.getMin();
			var	newRootSubTree = newRoot.right,
				newRootParent = this.getParent(newRoot.value);
			// remove newRoot as a leaf
			newRootParent.left = undefined;

			// add right and this to newRoot
			newRoot.right = this.right;
			newRoot.left = this;

			// adds subtree
			if (newRootSubTree) {
				newRoot.right.addLeaf(newRootSubTree);
			}

			// remove right from this
			this.right = undefined; 
		}
		return newRoot || this;
	}
};


/*
 * Complexity: What is the time complexity of the above functions?
 */

/*
var tree = new BinarySearchTree(20);
 
var t20 = new BinarySearchTree();
var t15 = new BinarySearchTree();
var t18 = new BinarySearchTree();
var t19 = new BinarySearchTree();
var t21 = new BinarySearchTree();
var t17 = new BinarySearchTree();
var t16 = new BinarySearchTree();
*/
/*
var tree = BinarySearchTree(20)
treeaddLeaf(10)
treeaddLeaf(25)
var root = BinarySearchTree(15)
treeaddLeaf(root)
treeaddLeaf(13)
*/